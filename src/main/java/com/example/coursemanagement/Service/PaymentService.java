package com.example.coursemanagement.Service;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import java.math.BigDecimal;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

public class PaymentService {

    private static final String SEPAY_API_URL = "https://my.sepay.vn/userapi";
    private static final String SEPAY_API_KEY = "EYQJJ4VKTUFAFV55XH1FUWEGNT4KA7I6MRBJXDCCZZNIGLS9NM70AMP6KPRJQEYS";
    private static final String SEPAY_ACCOUNT_NUMBER = "1518893947588";
    private static final String SEPAY_BANK_CODE = "MBBank";

    // T·∫°o m√£ QR, hi·ªÉn th·ªã l√™n m√†n h√¨nh, v√† l∆∞u v√†o file
    public static void taoMaQR(int userId, String accountNumber, String bankCode, String memo, int amount) {
        try {
            // T·∫°o d·ªØ li·ªáu VietQR (d·ª± ph√≤ng n·∫øu API SePay th·∫•t b·∫°i)
            String qrData = generateVietQRData(accountNumber, bankCode, amount, memo);

            // Th·ª≠ g·ªçi API SePay
            String url = SEPAY_API_URL + "/qr/create";
            String body = String.format(
                    "{\"account_number\": \"%s\", \"bank_code\": \"%s\", \"amount\": %d, \"memo\": \"%s\", \"order_id\": \"ORDER_%s\"}",
                    accountNumber, bankCode, amount, memo, System.currentTimeMillis());

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + SEPAY_API_KEY)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(body, StandardCharsets.UTF_8))
                    .build();

            HttpClient client = HttpClient.newHttpClient();
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            int statusCode = response.statusCode();
            System.out.println("üñºÔ∏è T·∫°o m√£ QR v·ªõi n·ªôi dung \"" + memo + "\":");
            System.out.println("Status code: " + statusCode);
            System.out.println("Response body: " + response.body());

            if (statusCode != 200) {
                System.out.println("API SePay tr·∫£ v·ªÅ l·ªói (Status code: " + statusCode + "). S·ª≠ d·ª•ng d·ªØ li·ªáu VietQR...");
            } else {
                JSONObject jsonResponse = new JSONObject(response.body());
                qrData = jsonResponse.getString("qr_data");
            }

            // Hi·ªÉn th·ªã m√£ QR l√™n m√†n h√¨nh v√† l∆∞u v√†o file
            String fileName = "qrcode_" + memo + ".png";
            BufferedImage qrImage = generateQRCodeImage(qrData, 200, 200, fileName);
            displayQRCode(qrImage, memo);

        } catch (IOException e) {
            System.err.println("L·ªói k·∫øt n·ªëi ho·∫∑c ƒë·ªçc ph·∫£n h·ªìi (SePay - QR): " + e.getMessage());
            e.printStackTrace();
        } catch (InterruptedException e) {
            System.err.println("Y√™u c·∫ßu b·ªã gi√°n ƒëo·∫°n (SePay - QR): " + e.getMessage());
            e.printStackTrace();
        } catch (WriterException e) {
            System.err.println("L·ªói khi t·∫°o h√¨nh ·∫£nh QR: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // T·∫°o chu·ªói VietQR theo chu·∫©n ch√≠nh th·ª©c
    private static String generateVietQRData(String accountNumber, String bankCode, int amount, String memo) {
        StringBuilder qrData = new StringBuilder();
        qrData.append("000201");
        qrData.append("010212");

        String beneficiaryInfo = String.format(
                "3800%02d0100%02dA000000727%02d%02d%s%02d%s%02d%s",
                38,
                bankCode.length(),
                bankCode.length() + 26,
                bankCode.length(),
                bankCode,
                accountNumber.length(),
                accountNumber,
                memo.length(),
                memo
        );
        qrData.append(beneficiaryInfo);

        qrData.append("5303704");

        String amountStr = String.format("%d", amount);
        qrData.append(String.format("54%02d%s", amountStr.length(), amountStr));

        String purpose = String.format("08%02d%s", memo.length(), memo);
        qrData.append(purpose);

        qrData.append("6304");

        String crc = calculateCRC16(qrData.toString());
        qrData.append(crc);

        return qrData.toString();
    }

    // T√≠nh CRC16 theo chu·∫©n VietQR
    private static String calculateCRC16(String data) {
        int crc = 0xFFFF;
        int polynomial = 0x1021;

        for (int i = 0; i < data.length(); i++) {
            crc ^= (data.charAt(i) << 8);
            for (int j = 0; j < 8; j++) {
                if ((crc & 0x8000) != 0) {
                    crc = (crc << 1) ^ polynomial;
                } else {
                    crc <<= 1;
                }
                crc &= 0xFFFF;
            }
        }

        return String.format("%04X", crc);
    }

    // T·∫°o h√¨nh ·∫£nh QR v√† l∆∞u v√†o file, tr·∫£ v·ªÅ BufferedImage
    private static BufferedImage generateQRCodeImage(String text, int width, int height, String fileName) throws WriterException, IOException {
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

        // ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c l∆∞u m√£ QR
        String qrDirectory = "D:\\java\\btl\\btl\\javaApp\\qr";
        Path directoryPath = FileSystems.getDefault().getPath(qrDirectory);

        // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        Files.createDirectories(directoryPath);

        // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho file m√£ QR
        Path filePath = directoryPath.resolve(fileName);

        System.out.println("ƒê∆∞·ªùng d·∫´n l∆∞u m√£ QR: " + filePath.toAbsolutePath());
        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", filePath);

        // Tr·∫£ v·ªÅ BufferedImage ƒë·ªÉ hi·ªÉn th·ªã
        return MatrixToImageWriter.toBufferedImage(bitMatrix);
    }

    // Hi·ªÉn th·ªã m√£ QR l√™n m√†n h√¨nh
    private static void displayQRCode(BufferedImage qrImage, String memo) {
        JFrame frame = new JFrame("M√£ QR - " + memo);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 300);

        JLabel label = new JLabel(new ImageIcon(qrImage));
        frame.add(label);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null); // CƒÉn gi·ªØa m√†n h√¨nh
    }

    // Ki·ªÉm tra l·ªãch s·ª≠ giao d·ªãch v√† c·∫≠p nh·∫≠t s·ªë d∆∞ n·∫øu t√¨m th·∫•y
    private static void kiemTraLichSuGiaoDich(String tuKhoaNoiDung, int userId, int amount) {
        try {
            String url = SEPAY_API_URL + "/transactions/list?account_number=" + SEPAY_ACCOUNT_NUMBER + "&limit=20";

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + SEPAY_API_KEY)
                    .header("Content-Type", "application/json")
                    .GET()
                    .build();

            HttpClient client = HttpClient.newHttpClient();
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            int statusCode = response.statusCode();
            System.out.println("üßæ Giao d·ªãch c√≥ n·ªôi dung ch·ª©a \"" + tuKhoaNoiDung + "\":");
            System.out.println("Status code: " + statusCode);
            System.out.println("Response body: " + response.body());

            if (statusCode != 200) {
                throw new IOException("L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch. Status code: " + statusCode + ", Response: " + response.body());
            }

            JSONObject jsonResponse = new JSONObject(response.body());
            JSONArray transactions = jsonResponse.getJSONArray("transactions");
            boolean transactionFound = false;
            for (int i = 0; i < transactions.length(); i++) {
                JSONObject transaction = transactions.getJSONObject(i);
                String description = transaction.getString("transaction_content");
                if (description.contains(tuKhoaNoiDung)) {
                    System.out.println("T√¨m th·∫•y giao d·ªãch: " + transaction.toString());
                    transactionFound = true;

                    // C·∫≠p nh·∫≠t account_balance trong database
                    Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=IT_Course_Management", "username", "password");
                    String sql = "UPDATE Users SET account_balance = account_balance + ? WHERE userId = ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setBigDecimal(1, new BigDecimal(amount));
                    stmt.setInt(2, userId);
                    stmt.executeUpdate();
                    conn.close();

                    System.out.println("C·ªông " + amount + " VND v√†o account_balance c·ªßa userId " + userId);
                    break; // Tho√°t v√≤ng l·∫∑p sau khi t√¨m th·∫•y giao d·ªãch
                }
            }
            if (!transactionFound) {
                System.out.println("Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi n·ªôi dung \"" + tuKhoaNoiDung + "\". Kh√¥ng c·∫≠p nh·∫≠t s·ªë d∆∞.");
            }

        } catch (IOException e) {
            System.err.println("L·ªói k·∫øt n·ªëi ho·∫∑c ƒë·ªçc ph·∫£n h·ªìi (SePay - Transactions): " + e.getMessage());
            e.printStackTrace();
        } catch (InterruptedException e) {
            System.err.println("Y√™u c·∫ßu b·ªã gi√°n ƒëo·∫°n (SePay - Transactions): " + e.getMessage());
            e.printStackTrace();
        } catch (SQLException e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Test th·ª≠
    public static void main(String[] args) {
        // T·∫°o v√† hi·ªÉn th·ªã m√£ QR
        taoMaQR(1, SEPAY_ACCOUNT_NUMBER, SEPAY_BANK_CODE, "abc", 10000);

        // Ki·ªÉm tra giao d·ªãch v√† c·∫≠p nh·∫≠t s·ªë d∆∞
        kiemTraLichSuGiaoDich("abc", 1, 10000);
    }
}